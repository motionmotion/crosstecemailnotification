#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MotionMotion.Crosstec.EmailNotification
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebERPEmail")]
	public partial class SQLWebERPEmailDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTB_SYSTEM_LOG(TB_SYSTEM_LOG instance);
    partial void UpdateTB_SYSTEM_LOG(TB_SYSTEM_LOG instance);
    partial void DeleteTB_SYSTEM_LOG(TB_SYSTEM_LOG instance);
    partial void InsertTB_EMAILADDRESS(TB_EMAILADDRESS instance);
    partial void UpdateTB_EMAILADDRESS(TB_EMAILADDRESS instance);
    partial void DeleteTB_EMAILADDRESS(TB_EMAILADDRESS instance);
    #endregion
		
		public SQLWebERPEmailDataContext() : 
				base(global::MotionMotion.Crosstec.EmailNotification.Properties.Settings.Default.WebERPEmailConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLWebERPEmailDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLWebERPEmailDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLWebERPEmailDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLWebERPEmailDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TB_SYSTEM_LOG> TB_SYSTEM_LOGs
		{
			get
			{
				return this.GetTable<TB_SYSTEM_LOG>();
			}
		}
		
		public System.Data.Linq.Table<TB_EMAILADDRESS> TB_EMAILADDRESSes
		{
			get
			{
				return this.GetTable<TB_EMAILADDRESS>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TB_SYSTEM_LOG")]
	public partial class TB_SYSTEM_LOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FNID;
		
		private int _FNLOG_LEVEL;
		
		private string _FSLOG_MESSAGE;
		
		private System.DateTime _FDCREATE_TIME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFNIDChanging(long value);
    partial void OnFNIDChanged();
    partial void OnFNLOG_LEVELChanging(int value);
    partial void OnFNLOG_LEVELChanged();
    partial void OnFSLOG_MESSAGEChanging(string value);
    partial void OnFSLOG_MESSAGEChanged();
    partial void OnFDCREATE_TIMEChanging(System.DateTime value);
    partial void OnFDCREATE_TIMEChanged();
    #endregion
		
		public TB_SYSTEM_LOG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FNID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FNID
		{
			get
			{
				return this._FNID;
			}
			set
			{
				if ((this._FNID != value))
				{
					this.OnFNIDChanging(value);
					this.SendPropertyChanging();
					this._FNID = value;
					this.SendPropertyChanged("FNID");
					this.OnFNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FNLOG_LEVEL", DbType="Int NOT NULL")]
		public int FNLOG_LEVEL
		{
			get
			{
				return this._FNLOG_LEVEL;
			}
			set
			{
				if ((this._FNLOG_LEVEL != value))
				{
					this.OnFNLOG_LEVELChanging(value);
					this.SendPropertyChanging();
					this._FNLOG_LEVEL = value;
					this.SendPropertyChanged("FNLOG_LEVEL");
					this.OnFNLOG_LEVELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSLOG_MESSAGE", DbType="NVarChar(MAX)")]
		public string FSLOG_MESSAGE
		{
			get
			{
				return this._FSLOG_MESSAGE;
			}
			set
			{
				if ((this._FSLOG_MESSAGE != value))
				{
					this.OnFSLOG_MESSAGEChanging(value);
					this.SendPropertyChanging();
					this._FSLOG_MESSAGE = value;
					this.SendPropertyChanged("FSLOG_MESSAGE");
					this.OnFSLOG_MESSAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FDCREATE_TIME", DbType="DateTime NOT NULL")]
		public System.DateTime FDCREATE_TIME
		{
			get
			{
				return this._FDCREATE_TIME;
			}
			set
			{
				if ((this._FDCREATE_TIME != value))
				{
					this.OnFDCREATE_TIMEChanging(value);
					this.SendPropertyChanging();
					this._FDCREATE_TIME = value;
					this.SendPropertyChanged("FDCREATE_TIME");
					this.OnFDCREATE_TIMEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TB_EMAILADDRESS")]
	public partial class TB_EMAILADDRESS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FNID;
		
		private string _FSEMAILADDRESS;
		
		private System.Nullable<System.DateTime> _FDCREATE_TIME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFNIDChanging(long value);
    partial void OnFNIDChanged();
    partial void OnFSEMAILADDRESSChanging(string value);
    partial void OnFSEMAILADDRESSChanged();
    partial void OnFDCREATE_TIMEChanging(System.Nullable<System.DateTime> value);
    partial void OnFDCREATE_TIMEChanged();
    #endregion
		
		public TB_EMAILADDRESS()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FNID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FNID
		{
			get
			{
				return this._FNID;
			}
			set
			{
				if ((this._FNID != value))
				{
					this.OnFNIDChanging(value);
					this.SendPropertyChanging();
					this._FNID = value;
					this.SendPropertyChanged("FNID");
					this.OnFNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSEMAILADDRESS", DbType="NVarChar(MAX)")]
		public string FSEMAILADDRESS
		{
			get
			{
				return this._FSEMAILADDRESS;
			}
			set
			{
				if ((this._FSEMAILADDRESS != value))
				{
					this.OnFSEMAILADDRESSChanging(value);
					this.SendPropertyChanging();
					this._FSEMAILADDRESS = value;
					this.SendPropertyChanged("FSEMAILADDRESS");
					this.OnFSEMAILADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FDCREATE_TIME", DbType="DateTime")]
		public System.Nullable<System.DateTime> FDCREATE_TIME
		{
			get
			{
				return this._FDCREATE_TIME;
			}
			set
			{
				if ((this._FDCREATE_TIME != value))
				{
					this.OnFDCREATE_TIMEChanging(value);
					this.SendPropertyChanging();
					this._FDCREATE_TIME = value;
					this.SendPropertyChanged("FDCREATE_TIME");
					this.OnFDCREATE_TIMEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
